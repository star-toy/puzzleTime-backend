name: depoly

on:
  push:
    branches: ['main']

jobs:
  # 빌드 및 테스트 Job
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          # MYSQL_DATABASE: polling
          # MYSQL_USER: polling
          # MYSQL_PASSWORD: polling
          MYSQL_DATABASE: puzzletime #변경예정
          MYSQL_USER: puzzletime
          MYSQL_PASSWORD: puzzletime
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Wrapper에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: Gradle 빌드
        env:
        #  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }} # Sentry 인증 토큰 전달
          GRADLE_ENTERPRISE_CONSENT: "yes"
        run: ./gradlew clean build --scan

      - name: 빌드 디렉토리 확인
        run: ls -la build/

      - name: 빌드 결과 확인
        run: ls -la build/libs/

      # 테스트 실행 (MySQL 서비스에 연결)
      # - name: 테스트 실행
      #   env:
      #      # SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/puzzletime?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true
      #      # SPRING_DATASOURCE_USERNAME: puzzletime
      #      # SPRING_DATASOURCE_PASSWORD: puzzletime
      #      SPRING_PROFILES_ACTIVE: test
      #      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/polling?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true
      #      SPRING_DATASOURCE_USERNAME: polling
      #      SPRING_DATASOURCE_PASSWORD: polling
      #   run: ./gradlew test --scan # --scan 옵션 추가


  # 배포 Job
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
          
  #   steps:
  #     - name: 리포지토리 체크아웃
  #       uses: actions/checkout@v2
        
  #     - name: JDK 설치
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'

  #     - name: AWS 인증하기
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: ap-northeast-2
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - name: 현재 작업 디렉토리 확인
  #       run: pwd # 현재 작업 디렉토리 확인 ( /home/runner/work/puzzleTime-backend/puzzleTime-backend )

  #     - name: Gradle Wrapper에 실행 권한 추가
  #       run: chmod +x ./gradlew
        
  #    # - name: Gradle 빌드 (deploy job에서)
  #     #  env:
  #      #   SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }} # Sentry 인증 토큰 전달
  #      # run: ./gradlew clean build --scan
  #       #working-directory: ./polling-backend # 빌드할 디렉토리 설정

  #     - name: 빌드 디렉토리 확인
  #       run: ls -la /home/runner/work/puzzleTime-backend/puzzleTime-backend/build/ # 절대 경로 사용

  #     - name: 빌드 결과 확인
  #       run: ls -la /home/runner/work/puzzleTime-backend/puzzleTime-backend/build/libs/ # 절대 경로 사용
      
  #     - name: JAR 파일 전송
  #       uses: appleboy/scp-action@v0.1.3 # master -> 버전 명시
  #       with:
  #         host: ${{ secrets.LIGHTSAIL_HOST }} # 해당 인스턴스의 공용 IP 주소
  #         username: ubuntu
  #         key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
  #         source: '/home/runner/work/puzzleTime-backend/puzzleTime-backend/build/libs/puzzleTime-0.0.1-SNAPSHOT.jar' # 절대 경로 사용
  #         target: '/home/ubuntu/puzzleTime-backend'
  #         overwrite: true # 파일 덮어쓰기 허용
  #         debug: true # 디버그 모드 활성화
  #         timeout: 150s # 타임아웃 시간 증가
      

  #     - name: 서버에서 애플리케이션 실행
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.LIGHTSAIL_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.LIGHTSAIL_SSH_KEY }}

  #         script: |
  #           java -jar /home/ubuntu/puzzleTime-backend/github/workspace/build/libs/puzzleTime-0.0.1-SNAPSHOT.jar > /home/ubuntu/polling-backend/github/workspace/build/libs/app.log 2>&1 &

  #         debug: true
  #         timeout: 1500s
  #         command_timeout: 1500s
