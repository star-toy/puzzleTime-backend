name: develop_depoly

on:
  push:
    branches: ['develop']
    #branches: ['main']

jobs:
  # 빌드 및 테스트 Job
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: puzzletime
          MYSQL_USER: puzzletime
          MYSQL_PASSWORD: puzzletime
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Wrapper에 실행 권한 추가
        run: chmod +x ./gradlew
        
      - name: MySQL 서비스 상태 확인
        run: |
         echo "Waiting for MySQL service to be ready..."
          until echo 'SELECT 1' | mysql -h 127.0.0.1 -P 3306 -u puzzletime -ppuzzletime; do
            echo "MySQL is unavailable - waiting..."
            sleep 5
          done
          echo "MySQL is up and running!"
          
      - name: MySQL 컨테이너 로그 확인
        run: docker logs $(docker ps -q --filter "ancestor=mysql:latest")

      - name: Gradle 빌드
        env:
        #  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }} # Sentry 인증 토큰 전달
          GRADLE_ENTERPRISE_CONSENT: "yes"
          # Spring Boot 데이터베이스 설정
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/puzzletime?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_USERNAME: puzzletime
          SPRING_DATASOURCE_PASSWORD: puzzletime
          REGISTRATION_GOOGLE_CLIENT_ID: ${{ secrets.REGISTRATION_GOOGLE_CLIENT_ID }}
          REGISTRATION_GOOGLE_CLIENT_SECRET: ${{ secrets.REGISTRATION_GOOGLE_CLIENT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          REGISTRATION_GOOGLE_REDIRECT_URI: https://puzzletime.fun/login/oauth2/code/google
        run: ./gradlew clean build --scan

      - name: 빌드 디렉토리 확인
        run: ls -la build/

      - name: 빌드 결과 확인
        run: ls -la build/libs/




  #배포 Job
  deploy:
    needs: build
    runs-on: ubuntu-latest
          
    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2
        
      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: AWS 인증하기
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: 현재 작업 디렉토리 확인
        run: pwd # 현재 작업 디렉토리 확인 ( /home/runner/work/puzzleTime-backend/puzzleTime-backend )

      - name: Gradle Wrapper에 실행 권한 추가
        run: chmod +x ./gradlew
        
      - name: Gradle 빌드 (deploy job에서)
      #  env:
       #   SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }} # Sentry 인증 토큰 전달
        run: ./gradlew clean build --scan
        #working-directory: ./polling-backend # 빌드할 디렉토리 설정

      - name: 빌드 디렉토리 확인
        run: ls -la /home/runner/work/puzzleTime-backend/puzzleTime-backend/build/ # 절대 경로 사용

      - name: 빌드 결과 확인
        run: ls -la /home/runner/work/puzzleTime-backend/puzzleTime-backend/build/libs/ # 절대 경로 사용
      
      - name: JAR 파일 전송
        uses: appleboy/scp-action@v0.1.3 # master -> 버전 명시
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }} # 해당 인스턴스의 공용 IP 주소
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: '/home/runner/work/puzzleTime-backend/puzzleTime-backend/build/libs/puzzleTime-0.0.1-SNAPSHOT.jar' # 절대 경로 사용
          target: '/home/ubuntu/puzzleTime-backend'
          overwrite: true # 파일 덮어쓰기 허용
          debug: true # 디버그 모드 활성화
          timeout: 150s # 타임아웃 시간 증가

      - name: 실행 중인 jar 파일 종료
        uses: appleboy/ssh-action@v1.1.0
        continue-on-error: true
        with:
           host: ${{ secrets.LIGHTSAIL_HOST_DEV }}  # 해당 인스턴스의 공용 IP 주소
           username: ubuntu
           key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
           debug: true
           timeout: 300s
           script: |
            pids=$(pgrep -f "java -jar /home/ubuntu/puzzleTime-backend/github/workspace/build/libs/puzzleTime-0.0.1-SNAPSHOT.jar")

            if [ -n "$pids" ]; then
              for pid in $pids; do
                kill -15 $pid
              done
            fi
